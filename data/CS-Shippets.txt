SoftwareContainer softwareContainer = ((IEngineeringServiceProvider)deviceItem).GetService<SoftwareContainer>();
if (softwareContainer != null)
{
	Software software = softwareContainer.Software;
	PlcSoftware plcSoftware = softwareContainer.Software as PlcSoftware; // <-- This is starting point of import/export
}

//Import system blocks
private static void ImportSystemBlocks(PlcSoftware plcSoftware)
{
	PlcBlockSystemGroup systemblockGroup = plcSoftware.BlockGroup;
	IList<PlcBlock> blocks = systemblockGroup.Blocks.Import(new FileInfo(@"D:\Blocks\myBlock.xml"), ImportOptions.Override);
}


//Import blocks
private static void ImportBlocks(PlcSoftware plcSoftware)
{
	PlcBlockGroup blockGroup = plcSoftware.BlockGroup;
	IList<PlcBlock> blocks = blockGroup.Blocks.Import(new FileInfo(@"D:\Blocks\myBlock.xml"), ImportOptions.Override);
}

//Exports system blocks
private static void ExportSystemBlocks(PlcSoftware plcsoftware)
{
	PlcSystemBlockGroup sbSystemGroup = plcsoftware.BlockGroup.SystemBlockGroups[0];
	foreach (PlcSystemBlockGroup group in sbSystemGroup.Groups)
	{
		foreach (PlcBlock block in group.Blocks)
		{
			block.Export(new FileInfo(string.Format(@”D:\Samples\{0}.xml”, block.Name)),	ExportOptions.WithDefaults);
		}
	}
}

// Instantiate the blocks from a project library
// Step1 : Find a block by name
var type = project.ProjectLibrary.TypeFolder.Types.Find("SampleTypeName");
// Step2 : Check a block type
if (type is CodeBlockLibraryType) {
	// Step 3: Get a typed version of block
	CodeBlockLibraryTypeVersion blockVersion = type.Versions[0] as CodeBlockLibraryTypeVersion ;
	// Step 4: Using the CreateFrom method to create an instance of the version in the blocks composition
	PlcBlock newBlock = blocks.CreateFrom(blockVersion);
}

//Enumerate the instances of a type version in the project
LibraryTypeVersion version = ...;
PlcSoftware plcSoftware = ...;
IInstanceSearchScope searchScope = plcSoftware as IInstanceSearchScope;
if(searchScope != null)
{
	IList<LibraryTypeInstanceInfo> instanceInfos = version.FindInstances(searchScope);
	IEnumerable<IEngineeringObject> instances = instanceInfos.Select(instanceInfo => instanceInfo.LibraryTypeInstance);
}
